---
layout: post
title:  "Lab 1: Input / Output (I/O)"
date:   2015-05-12 13:21:30
categories: docs
---

In this lab, you will learn the basics of how to control the real world with your code. We're going to use a button, two LEDs, and two resistors.

Connect them like this:
<Fritzing diagram goes here>

The first button is connected to pin 3, LED 1 is connected to pin 4, and LED 2 is connected to pin 5.

For this lab, we're going to start out by just using LED 1 and the button. After we get LED 1 working, we'll add LED 2 into the mix to make it a little more interesting.

Whenever the button is being pushed, we want LED 1 to turn on, but any time that the button is not being pushed, we want LED 1 to be turned off. On the Arduino, we can use a command (a function) called `DigitalRead`. This will look at a pin and tell us whether it sees 5 volts or not. If the button is being pushed, pin 3 will have 5 volts flowing to it from the power supply. This is equivalent to `1` in binary.

There is also another function, called `DigitalWrite`. `DigitalWrite` will take a 1 or a 0 and apply it on an output pin. So, if you `DigitalWrite` a `1` to pin 4, then that pin will be connected to 5 volts internally. Since there's an LED connected to pin 4, it will now have power flowing through it and it will turn on.

If we combine the two, we can connect a button to the LED using software! First, we want to read the value of the button. So,

    bool buttonPushed = digitalread(3);

and then we can "write" that value to the output pin controlling the LED.

    digitalWrite(4, buttonPushed);

**Challenge: Rewrite that code to just use one line to control the LED, rather than two.**

Now, LED 2 is on pin 5. So, let's make it so that LED 2 is *on* when the user is *not pushing* the button. In C++, if you have a value that is either true or false, you can invert the logical value with an exclamation mark (`!`). So, `!true` is exactly the same as `false`. If I say `bool good = true;` and then `bool notgood = !good;`, `notgood` is equal to false.

Attempt to make LED 2 do the opposite of whatever you're telling LED 1 to do. If you have trouble, ask a TA, but make sure to try it yourself, don't just give up immediately. If you get it working with 4 lines of code, try to do it in 3 lines of code in the loop function, and then try to do it again with only 2 lines of code in the loop function.

There are a lot of different ways to make this work, but there are three ways that most people are likely to try, and if you can figure all of them out, you're doing great! If you need help, there's absolutely nothing wrong with that.
